import numpy  #numpy is used to make some operrations with arrays more easily
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

__errors__= [];  #global variable to store the errors/loss for visualisation

renamed = {
    'W': 'Wins',
    'Rate': 'QB Rating',
    'Ply':  'Offensive plays',
    'Y/P': 'Yards per play', 
    'DPly': 'Defensive plays',
    'DY/P': 'D Yards per play',
	'NQTO': 'Non QB Turnovers'
}

def prepare_data():
	df = pd.read_excel('../datasets/qb_impact.xlsx', header=1, usecols=[4, 13, 16, 18, 19, 20, 21, 22])
	df['NQTO'] = df['TO']-df['Int']
	df = df[['W', 'Rate', 'Ply', 'Y/P', 'DPly', 'DY/P', 'NQTO']]
	df.rename(columns = renamed, inplace = True)
	return df


def h(params, sample):
	"""This evaluates a generic linear function h(x) with current parameters.  h stands for hypothesis

	Args:
		params (lst) a list containing the corresponding parameter for each element x of the sample
		sample (lst) a list containing the values of a sample 

	Returns:
		Evaluation of h(x)
	"""
	acum = 0
	for i in range(len(params)):
		acum = acum + params[i]*sample[i]  #evaluates h(x) = a+bx1+cx2+ ... nxn.. 
	return acum


def show_errors(params, samples,y):
	"""Appends the errors/loss that are generated by the estimated values of h and the real value y
	
	Args:
		params (lst) a list containing the corresponding parameter for each element x of the sample
		samples (lst) a 2 dimensional list containing the input samples 
		y (lst) a list containing the corresponding real result for each sample
	
	"""
	error_acum =0
#	print("transposed samples") 
#	print(samples)
	for i in range(len(samples)):
		hyp = h(params,samples[i])
		print( "hyp  %f  y %f " % (hyp,  y[i]))   
		error=hyp-y[i]
		error_acum=+error**2 # this error is the original cost function, (the one used to make updates in GD is the derivated verssion of this formula)
	mean_error_param=error_acum/len(samples)
	__errors__.append(mean_error_param)

def GD(params, samples, y, alfa):
	"""
	Gradient Descent algorithm 
	Args:
		params (lst) a list containing the corresponding parameter for each element x of the sample
		samples (lst) a 2 dimensional list containing the input samples 
		y (lst) a list containing the corresponding real result for each sample
		alfa(float) the learning rate
	Returns:
		temp(lst) a list with the new values for the parameters after 1 run of the sample set
	"""
	temp = list(params)
	general_error=0
	for j in range(len(params)):
		acum =0; error_acum=0
		for i in range(len(samples)):
			error = h(params,samples[i]) - y[i]
			acum = acum + error*samples[i][j]  #Sumatory part of the Gradient Descent formula for linear Regression.
		temp[j] = params[j] - alfa*(1/len(samples))*acum  #Subtraction of original parameter value with learning rate included.
	return temp

#  univariate example
#params = [0,0]
#samples = [1,2,3,4,5]
#y = [2,4,6,8,10]

#  multivariate example trivial
"""
df = pd.read_excel('../datasets/collegeToPros.xlsx', header=1, usecols=[4, 6, 20, 28, 29, 30, 31])
df.rename(columns = renamed, inplace = True)
df['Sacked %'] = df['Sacked %']*100
df_y = df['QB Rating']
df_x = df[['Draft',
    'Sacked %',
    'Completion Percentage',
    'Yards per Attempt',
    'Efficiency Rating']]
X = df_x
y = df_y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

#  multivariate example
params = [0,0,0,0,0]
#samples = [[1,1],[2,2],[3,3],[4,4],[5,5],[2,2],[3,3],[4,4]]
#y = [2,4,6,8,10,2,5.5,16]

alfa = 0.0001  #  learning rate
samples = numpy.asarray(X_train)
y_test_array = numpy.asarray(y_test)
y_hand = numpy.asarray(y_train)
print(y_hand, 'y hand')
x_test = numpy.asarray(X_test)

for i in range(len(samples)):
	if isinstance(samples[i], list):
		samples[i]=  samples[i]
	else:
		samples[i]=  samples[i]
print ("original samples:")
#print (samples)
#samples = scaling(samples)
print ("scaled samples:")
#print (samples)

"""

def main():
	df = prepare_data()
	df_y = df['Wins']
	df_x = df[['QB Rating',
    'Offensive plays',
    'Yards per play',
    'Defensive plays',
    'D Yards per play',
	'Non QB Turnovers']]
	X_train = df_x.head(520).to_numpy()
	X_test = df_x.tail(150).to_numpy()
	y_train = df_y.head(520).to_numpy()
	y_test = df_y.tail(150).to_numpy()
	min_max_scaler = MinMaxScaler()
	data_minmax = min_max_scaler.fit_transform(X_train)
	params = [10,5,4,3,-7,1]
	alfa = 0.005
	epochs = 0
	print(data_minmax, 'X')
	print(y_train, 'y')
	while True:  #  run gradient descent until local minima is reached
		oldparams = list(params)
		print (params)
		params=GD(params, data_minmax,y_train,alfa)	
		show_errors(params, data_minmax, y_train)  #only used to show errors, it is not used in calculation
		print (params)
		epochs = epochs + 1
		if(oldparams == params or epochs == 1000):   #  local minima is found when there is no further improvement
			print ("samples:")
			print(data_minmax)
			print ("final params:")
			print (params)
			break
	y_pred = []
	min_max_scaler.scaler_ = [0.01416431, 0.00301205, 0.3262217,  0.00373134, 0.36425892, 0.04166667]
	norm_xtest = min_max_scaler.transform(X_test)
	for x in norm_xtest:
		aux = 0
		for i in range(6):
			aux = aux + x[i]*params[i]
		y_pred.append(aux)
	# The coefficients
	print('Coefficients: \n', params)
# The mean squared error
	print('Mean squared error: %.2f'
		% mean_squared_error(y_test, y_pred))
# The coefficient of determination: 1 is perfect prediction
	print('Coefficient of determination: %.2f'
		% r2_score(y_test, y_pred))
	print(min_max_scaler.scale_)

#use this to generate a graph of the errors/loss so we can see whats going on (diagnostics)

main()

plt.plot(__errors__)
plt.savefig('../assets/error.png')